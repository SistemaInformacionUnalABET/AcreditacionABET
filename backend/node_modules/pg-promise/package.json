{
  "_from": "pg-promise",
  "_id": "pg-promise@7.3.2",
  "_inBundle": false,
  "_integrity": "sha512-7DzyVossivGxpMbtDcb9pJrWp1zE6+B87jsNWiCm83VqO6QM4of8fqn6Q7D/bV3Lyg1Z+F5trm3wHFroLkzFBQ==",
  "_location": "/pg-promise",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "pg-promise",
    "fetchSpec": "latest",
    "name": "pg-promise",
    "raw": "pg-promise",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/pg-promise/-/pg-promise-7.3.2.tgz",
  "_shasum": "0cee9fb747932b594f122ba79e67d0cd226473c6",
  "_shrinkwrap": null,
  "_spec": "pg-promise",
  "_where": "C:\\Users\\Daniel\\Documents\\Unal\\Trabajo_BD_Ing_EyE\\AcreditacionABET\\backend",
  "author": {
    "email": "vitaly.tomilov@gmail.com",
    "name": "Vitaly Tomilov"
  },
  "bugs": {
    "email": "vitaly.tomilov@gmail.com",
    "url": "https://github.com/vitaly-t/pg-promise/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "manakin": "~0.5.1",
    "pg": "~7.4.0",
    "pg-minify": "~0.5.3",
    "spex": "~2.0.1"
  },
  "deprecated": false,
  "description": "Promises interface for PostgreSQL",
  "devDependencies": {
    "@types/node": "~8.0.49",
    "JSONStream": "~1.3.1",
    "bluebird": "~3.5.1",
    "coveralls": "~3.0.0",
    "eslint": "~4.11.0",
    "istanbul": "~0.4.5",
    "jasmine-node": "~1.14.5",
    "jsdoc": "~3.5.5",
    "pg-query-stream": "~1.1.1",
    "typescript": "~2.6.1"
  },
  "engines": {
    "node": ">=4.5",
    "npm": ">=2.15"
  },
  "files": [
    "lib",
    "typescript"
  ],
  "homepage": "https://github.com/vitaly-t/pg-promise",
  "keywords": [
    "pg",
    "postgres",
    "promise"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "pg-promise",
  "optionalDependencies": {},
  "readme": "pg-promise\n==========\n\n[Promises/A+] interface for PostgreSQL.\n\n[![Build Status](https://travis-ci.org/vitaly-t/pg-promise.svg?branch=master)](https://travis-ci.org/vitaly-t/pg-promise)\n[![Coverage Status](https://coveralls.io/repos/vitaly-t/pg-promise/badge.svg?branch=master)](https://coveralls.io/r/vitaly-t/pg-promise?branch=master)\n[![Package Quality](http://npm.packagequality.com/shield/pg-promise.svg)](http://packagequality.com/#?package=pg-promise)\n[![Join the chat at https://gitter.im/vitaly-t/pg-promise](https://img.shields.io/gitter/room/vitaly-t/pg-promise.svg)](https://gitter.im/vitaly-t/pg-promise?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n---\n\n<a href='https://pledgie.com/campaigns/32367'><img alt='Click here to lend your support to: pg-promise and make a donation at pledgie.com !' src='https://pledgie.com/campaigns/32367.png?skin_name=chrome' border='0' ></a> <a href='https://www.paypal.me/VitalyTomilov'><img alt='Click here to lend your support to: pg-promise and make a donation at PayPal.com !' src='https://github.com/vitaly-t/pg-promise/raw/master/jsdoc/paypal.png' border='0' ></a>\n\n* [About](#about)\n* [Documentation](#documentation)  \n* [Contributing](#contributing)    \n* [Usage]\n  - [Methods](#methods)\n  - [Query Formatting](#query-formatting)\n    - [Index Variables]  \n    - [Named Parameters]\n      - [Nested Named Parameters]\n  - [Formatting Filters](#formatting-filters)          \n    - [SQL Names]  \n      - [Alias Filter]    \n    - [Raw Text]  \n    - [Open Values]\n    - [JSON Filter]\n    - [CSV Filter]    \n  - [Custom Type Formatting]\n    - [Explicit CTF]\n    - [Symbolic CTF]    \n  - [Query Files](#query-files)    \n  - [Tasks](#tasks)    \n  - [Transactions](#transactions)\n    - [Nested Transactions](#nested-transactions)   \n    - [Configurable Transactions](#configurable-transactions)\n  - [ES6 Generators](#es6-generators)\n  - [Library de-initialization](#library-de-initialization)\n* [History](#history)\n* [License](#license)\n\n---\n\n# About\n\nBuilt on top of [node-postgres], this library adds the following:\n\n* Automatic connections\n* Automatic transactions\n* Powerful query-formatting engine\n* Support for ES6 generators and ES7 `async/await`\n* Declarative approach to handling query results\n* Global events reporting for central handling\n* Extensive support for external SQL files\n* Support for all promise libraries\n\n# Documentation\n\nChapter [Usage] below explains the basics you need to know, while the [Official Documentation]\ngets you started, and provides links to all other resources.\n\n# Contributing\n\nPlease read the [Contribution Notes](https://github.com/vitaly-t/pg-promise/blob/master/CONTRIBUTING.md) before opening any new issue or PR.\n\n# Usage\n\nOnce you have created a [Database] object, according to the steps in the [Official Documentation],\nyou get access to the methods documented below. \n\n## Methods \n\nAll query methods of the library are based off generic method [query].\n\nYou should normally use only the derived, result-specific methods for executing queries, all of which are named according\nto how many rows of data the query is expected to return, so for each query you should pick the right method:\n[none], [one], [oneOrNone], [many], [manyOrNone] = [any]. Do not confuse the method name for the number of rows\nto be affected by the query, which is completely irrelevant.\n\nBy relying on the result-specific methods you protect your code from an unexpected number of data rows,\nto be automatically rejected (treated as errors).  \n\nThere are also a few specific methods that you will often need:\n\n* [result], [multi], [multiResult] - for verbose and/or multi-query results;\n* [map], [each] - for simpler/inline result pre-processing/re-mapping;\n* [func], [proc] - to simplify execution of SQL functions/procedures;\n* [stream] - to access rows from a query via a read stream;\n* [connect], [task] + [tx] - for shared connections + automatic transactions, each exposing a connected protocol that\n  has additional methods [batch], [page] and [sequence].\n\nThe protocol is fully customizable / extendable via event [extend].\n\n**IMPORTANT:**\n\nThe most important methods to understand from start are [task] and [tx]. As documented for method [query],\nit acquires and releases the connection, which makes it a poor choice for executing multiple queries at once.\nFor this reason, [Chaining Queries] is an absolute must-read, to avoid writing the code that misuses connections.\n\n[Learn by Example] is a beginner's tutorial based on examples.\n\n## Query Formatting\n\nThis library comes with embedded query-formatting engine that offers high-performance value escaping,\nflexibility and extensibility. It is used by default with all query methods, unless you opt out of it entirely\nvia option `pgFormatting` within [Initialization Options].  \n\nAll formatting methods used internally are available from the [formatting] namespace, so they can also be used\ndirectly when needed. The main method there is [format], used by every query method to format the query. \n\nThe formatting syntax for variables is decided from the type of `values` passed in:\n\n* [Index Variables] when `values` is an array or a single basic type;\n* [Named Parameters] when `values` is an object (other than `Array` or `null`).\n\n**ATTENTION:** Never use ES6 template strings or manual concatenation to generate queries, as both\ncan easily result in broken queries! Only this library's formatting engine knows how to properly escape\nvariable values for PostgreSQL.\n\n### Index Variables\n\nThe simplest (classic) formatting uses `$1, $2, ...` syntax to inject values into the query string,\nbased on their index (from `$1` to `$100000`) from the array of values: \n\n```js\ndb.any('SELECT * FROM product WHERE price BETWEEN $1 AND $2', [1, 10])\n```\n\nThe formatting engine also supports single-value parametrization for queries that use only variable `$1`: \n\n```js\ndb.any('SELECT * FROM users WHERE name = $1', 'John')\n```\n\nThis however works only for types `number`, `string`, `boolean`, `Date` and `null`, because types like `Array`\nand `Object` change the way parameters are interpreted. That's why passing in index variables within an array\nis advised as safer, to avoid ambiguities.\n\n### Named Parameters\n\nWhen a query method is parameterized with `values` as an object, the formatting engine expects the query to use\nthe Named Parameter syntax `$*propName*`, with `*` being any of the following open-close pairs: `{}`, `()`, `<>`, `[]`, `//`.\n\n```js\ndb.any('SELECT * FROM users WHERE name = ${name} AND active = $/active/', {\n    name: 'John',\n    active: true\n});\n```\n\nValid variable names are limited to the syntax of open-name JavaScript variables. \n\nKeep in mind that while property values `null` and `undefined` are both formatted as `null`,\nan error is thrown when the property does not exist.\n\n**`this` reference**\n\nProperty `this` refers to the formatting object itself, to be inserted as a JSON-formatted string.\n\n```js\ndb.none('INSERT INTO documents(id, doc) VALUES(${id}, ${this})', {\n    id: 123,\n    body: 'some text'    \n})\n//=> INSERT INTO documents(id, doc) VALUES(123, '{\"id\":123,\"body\":\"some text\"}')\n```    \n\n#### Nested Named Parameters\n\nStarting from v6.10.0, the library supports _Nested Named Parameters_:\n\n```js\nconst obj = {\n    one: {\n        two: {\n            three: 123\n        }\n    }\n};\ndb.any('SELECT ${one.two.three} FROM table', obj);\n```\n\nAnd the last name in the resolution (like `three` above) can also be a function that returns the actual value,\nto be called with `this` + single parameter pointing at the containing object (`two` in the example), or it can be\na [Custom Type Formatting] object, and so on, i.e. any type, and of any depth of nesting.\n\nPlease note, however, that nested parameters are not supported within the [helpers] namespace.\n\n## Formatting Filters\n\nBy default, all values are formatted according to their JavaScript type. Formatting filters (or modifiers),\nchange that, so the value is formatted differently. \n\nFilters use the same syntax for [Index Variables] and [Named Parameters], following immediately the variable name:\n\n* For [Index Variables]\n\n```js\ndb.any('SELECT $1:name FROM $2:name', ['price', 'products'])\n//=> SELECT \"price\" FROM \"products\"\n```\n\n* For [Named Parameters]\n\n```js\ndb.any('SELECT ${column:name} FROM ${table:name}', {\n    column: 'price',\n    table: 'products'    \n});\n//=> SELECT \"price\" FROM \"products\"\n```\n\nThe following filters are supported:\n\n* `:name` / `~` - [SQL Names]\n  - `:alias` - [Alias Filter]\n* `:raw` / `^` - [Raw Text]\n* `:value` / `#` - [Open Values]\n* `:json` - [JSON Filter]\n* `:csv` - [CSV Filter]\n\n### SQL Names\n\nWhen a variable ends with `:name`, or shorter syntax `~` (tilde), it represents an SQL name or identifier,\nto be escaped accordingly, and then wrapped in double quotes:\n\n```js\ndb.query('INSERT INTO $1~($2~) VALUES(...)', ['Table Name', 'Column Name']);\n//=> INSERT INTO \"Table Name\"(\"Column Name\") VALUES(...)\n```\n\nTypically, an SQL name variable is a text string, which must be at least 1 character long.\nHowever, `pg-promise` supports a variety of ways in which SQL names can be supplied:\n\n* A string that contains only `*` (asterisks) is automatically recognized as _all columns_:\n\n```js\ndb.query('SELECT $1:name FROM $2:name', ['*', 'table']);\n//=> SELECT * FROM \"table\"\n```\n\n* An array of strings to represent column names:\n\n```js\ndb.query('SELECT ${columns:name} FROM ${table:name}', {\n    columns: ['column1', 'column2'],\n    table: 'table'\n});\n//=> SELECT \"column1\",\"column2\" FROM \"table\"\n```\n\n* Any object that's not an array gets its properties enumerated for column names:\n\n```js\nconst obj = {\n    one: 1,\n    two: 2\n};\ndb.query('SELECT $1:name FROM $2:name', [obj, 'table']);\n//=> SELECT \"one\",\"two\" FROM \"table\"\n```\n\nIn addition, the syntax supports `this` to enumerate column names from the formatting object:\n \n```js\nconst obj = {\n    one: 1,\n    two: 2\n};\ndb.query('INSERT INTO table(${this:name}) VALUES(${one}, ${two})', obj);\n//=> INSERT INTO table(\"one\",\"two\") VALUES(1, 2)\n```\n\nRelying on this type of formatting for sql names and identifiers, along with regular variable formatting\nmakes your application impervious to [SQL injection].\n\nMethod [as.name] implements the formatting.\n\n#### Alias Filter\n\nAn alias is a lighter/simpler version of [SQL Names], which only supports a text string, and is used via the `:alias` filter.\n\nFor example, it will skip adding surrounding double quotes when the name is a same-case single word:\n\n```js\ndb.any('SELECT full_name as $1:alias FROM $2:name', ['name', 'table']);\n//=> SELECT full_name as name FROM \"table\"\n```\n\nFor more details see method [as.alias] that implements the formatting.\n\n### Raw Text\n\nWhen a variable ends with `:raw`, or shorter syntax `^`, the value is to be injected as raw text, without escaping.\n\nSuch variables cannot be `null` or `undefined`, because of the ambiguous meaning in this case, and those values\nwill throw error `Values null/undefined cannot be used as raw text.`\n\n```js\nconst where = pgp.as.format('WHERE price BETWEEN $1 AND $2', [5, 10]); // pre-format WHERE condition\ndb.any('SELECT * FROM products $1:raw', where);\n//=> SELECT * FROM products WHERE price BETWEEN 5 AND 10\n```\n\nSpecial syntax `this:raw` / `this^` is supported, to inject the formatting object as raw JSON string.\n\n### Open Values\n\nWhen a variable ends with `:value`, or shorter syntax `#`, it is escaped as usual, except when its type is a string,\nthe trailing quotes are not added.\n\nOpen values are primarily to be able to compose complete `LIKE`/`ILIKE` dynamic statements in external SQL files,\nwithout having to generate them in the code.\n\ni.e. you can either generate a filter like this in your code:\n\n```js\nconst name = 'John';\nconst filter = '%' + name + '%';\n```\n\nand then pass it in as a regular string variable, or you can pass in only `name`, and have your query use the\nopen-value syntax to add the extra search logic:\n\n```sql\nSELECT * FROM table WHERE name LIKE '%$1:value%')\n```\n\nMethod [as.value] implements the formatting.\n\n### JSON Filter\n\nWhen a variable ends with `:json`, explicit JSON formatting is applied to the value.\n\nBy default, any object that's not `Date`, `Array`, `null` or Custom-Type (see [Custom Type Formatting]),\nis automatically formatted as JSON.\n\nMethod [as.json] implements the formatting.\n\n### CSV Filter\n\nWhen a variable ends with `:csv`, it is formatted as a list of Comma-Separated Values, with each\nvalue formatted according to its JavaScript type.\n \nTypically, you would use this for a value that's an array. However, when it is not an array, the single value\nis formatted as usual - like there is no filter specified. \n\n```js\nconst ids = [1, 2, 3];\ndb.any('SELECT * FROM table WHERE id IN ($1:csv)', [ids])\n//=> SELECT * FROM table WHERE id IN (1,2,3)\n```\n\nMethod [as.csv] implements the formatting.\n\n## Custom Type Formatting\n\nStarting from version 7.2.0, the library supports dual syntax for _CTF_ (Custom Type Formatting):\n\n* [Explicit CTF] - extending the object/type directly, for ease of use, while changing its signature;\n* [Symbolic CTF] - extending the object/type via [Symbol] properties, without changing its signature.\n\nThe library always first checks for the [Symbolic CTF], and if no such syntax is used, only then it checks for the [Explicit CTF].\n\n### Explicit CTF\n\nAny value/object that implements function `toPostgres` is treated as a custom formatting type. The function is then called to get the actual value,\npassing it the value/object via `this` context, and plus as a single parameter (in case `toPostgres` is an ES6 arrow function):\n\n```js\nconst obj = {\n    toPostgres(self) {\n        // self = this = obj\n        \n        // return a value that needs proper escaping\n    }\n}\n```\n\nFunction `toPostgres` can return anything, including another object with its own `toPostgres` function, i.e. nested custom types are supported.\n\nThe value returned from `toPostgres` is escaped according to its JavaScript type, unless the object also contains property `rawType` set\nto a truthy value, in which case the returned value is considered pre-formatted, and thus injected directly, as [Raw Text]:\n\n```js\nconst obj = {\n    toPostgres(self) {\n        // self = this = obj\n        \n        // return a pre-formatted value that does not need escaping\n    },\n    rawType: true // use result from toPostgres directly, as Raw Text\n}\n```\n\nExample below implements a class that auto-formats `ST_MakePoint` from coordinates:\n\n```js\nclass STPoint {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.rawType = true; // no escaping, because we return pre-formatted SQL\n    }\n    \n    toPostgres(self) {\n        return pgp.as.format('ST_MakePoint($1, $2)', [this.x, this.y]);\n    }\n}\n```\n\nAnd a classic syntax for such a class is even simpler:\n\n```js\nfunction STPoint(x, y){\n    this.rawType = true; // no escaping, because we return pre-formatted SQL\n    this.toPostgres = () => pgp.as.format('ST_MakePoint($1, $2)', [x, y]);\n}\n```\n\nWith this class you can use `new STPoint(12, 34)` as a formatting value that will be injected correctly.  \n\nYou can also use _CTF_ to override any standard type:\n\n```js\nDate.prototype.toPostgres = a => a.getTime();\n```\n\n### Symbolic CTF\n\nThe only difference from [Explicit CTF] is that we set `toPostgres` and `rawType` as ES6 [Symbol] properties,\ndefined in the [ctf] namespace: \n\n```js\nconst ctf = pgp.as.ctf; // CTF symbols\n\nconst obj = {\n    [ctf.toPostgres](self) {\n        // self = this = obj\n        \n        // return a pre-formatted value that does not need escaping\n    },\n    [ctf.rawType]: true // use result from toPostgres directly, as Raw Text\n}\n```\n\nOther than that, it works exactly as the [Explicit CTF], but without changing the object's signature.\n\nIf you do not know what it means, you should read the ES6 [Symbol] API and its use for unique property names.\nBut in short, [Symbol] properties are not enumerated via `for(name in obj)`, i.e. they are not generally visible within\nJavaScript, only through specific API such as `Object.getOwnPropertySymbols`.\n\n## Query Files\n  \nUse of external SQL files (via [QueryFile]) offers many advantages:\n\n* Much cleaner JavaScript code, with all SQL kept in external files;\n* Much easier to write large and well-formatted SQL, with comments and whole revisions;\n* Changes in external SQL can be automatically re-loaded (option `debug`), without restarting the app;\n* Pre-formatting SQL upon loading (option `params`), making a two-step SQL formatting a breathe;\n* Parsing and minifying SQL (options `minify`/`compress`), for early error detection and compact queries.\n\nExample:\n\n```js\nconst path = require('path');\n\n// Helper for linking to external query files:\nfunction sql(file) {\n    const fullPath = path.join(__dirname, file);\n    return new pgp.QueryFile(fullPath, {minify: true});\n}\n\n// Create a QueryFile globally, once per file:\nconst sqlFindUser = sql('./sql/findUser.sql');\n\ndb.one(sqlFindUser, {id: 123})\n    .then(user => {\n        console.log(user);\n    })\n    .catch(error => {\n        if (error instanceof pgp.errors.QueryFileError) {\n            // => the error is related to our QueryFile\n        }\n    });\n```\n\nFile `findUser.sql`:\n\n```sql\n/*\n    multi-line comments are supported\n*/\nSELECT name, dob -- single-line comments are supported\nFROM Users\nWHERE id = ${id}\n```\n\nEvery query method of the library can accept type [QueryFile] as its `query` parameter.\nThe type never throws any error, leaving it for query methods to gracefully reject with [QueryFileError].\n\nUse of [Named Parameters] withing external SQL files is recommended over the [Index Variables], because it makes the SQL\nmuch easier to read and understand, and because it also allows [Nested Named Parameters], so variables in a large\nand complex SQL file can be grouped in namespaces for even easier visual separation.\n\n## Tasks\n\nA [task] represents a shared connection for executing multiple queries:\n\n```js\ndb.task(t => {\n    // execute a chain of queries;\n})\n    .then(data => {\n        // success;\n    })\n    .catch(error => {\n        // failed;    \n    });\n```\n\nTasks provide a shared connection context for its callback function, to be released when finished.\nSee also [Chaining Queries] to understand the importance of using tasks.\n\n## Transactions\n\nTransaction method [tx] is like [task] that also executes `BEGIN` + `COMMIT`/`ROLLBACK` when needed:\n\n```js\ndb.tx(t => {\n    // creating a sequence of transaction queries:\n    const q1 = t.none('UPDATE users SET active = $1 WHERE id = $2', [true, 123]);\n    const q2 = t.one('INSERT INTO audit(entity, id) VALUES($1, $2) RETURNING id',\n        ['users', 123]);\n\n    // returning a promise that determines a successful transaction:\n    return t.batch([q1, q2]); // all of the queries are to be resolved;\n})\n    .then(data => {\n        console.log(data); // successful transaction output;\n    })\n    .catch(error => {\n        console.log(error);\n    });\n```\n\n### Nested Transactions\n\nNested transactions automatically share the connection between all levels.\nThis library sets no limitation as to the depth (nesting levels) of transactions supported.\n\nExample:\n\n```js\ndb.tx(t => {\n    const queries = [\n        t.none('DROP TABLE users;'),\n        t.none('CREATE TABLE users(id SERIAL NOT NULL, name TEXT NOT NULL)')\n    ];\n    for (let i = 1; i <= 100; i++) {\n        queries.push(t.none('INSERT INTO users(name) VALUES($1)', 'name-' + i));\n    }\n    queries.push(\n        t.tx(t1 => {\n            return t1.tx(t2 => {\n                return t2.one('SELECT count(*) FROM users');\n            });\n        }));\n    return t.batch(queries);\n})\n    .then(data => {\n        console.log(data); // printing transaction result;\n    })\n    .catch(error => {\n        console.log(error); // printing the error;\n    });\n```\n\n### Implementation details\n\nIt is important to know that PostgreSQL does not support full/atomic nested transactions, it only\nsupports [savepoints](http://www.postgresql.org/docs/9.4/static/sql-savepoint.html) inside\ntransactions. Nested transactions and save-points are two ways to deal with *partial rollbacks*.\nSave-points are more general and allow this library to offer you nested transactions as an\nabstraction.\n\nSave-points allow you to rollback to any previous state since the beginning of the (only) top-level\ntransaction. Nested transactions allow you to only rollback to the state at the beginning of\nthe current transaction. Proper support for nested transactions means that the result of a\nsuccessful sub-transaction or query is rolled back when its parent transaction is rolled back.\n\nFrom a practical point of view, it means that when using nested transactions, a rollback knows\nautomatically which state to restore but when using save-points you must specify which previous\nsave-point to use.\nThis library tracks the save-points for you so you can work as if nested transactions were\nsupported by Postgres.\n\nIt is important to note that when using either save-points or \"real\" nested transactions (which are\ntools for partial rollbacks), data is finally written only when the top level transaction is\ncommitted.\n\nAlso, Postgres uses `BEGIN` amd `COMMIT / ROLLBACK` for the top transaction and `SAVEPOINT pointName`\nand `ROLLBACK TO pointName` for inner save-points. This library automatically provides a transaction\non the top level, and save-points for all sub-transactions.\n\n### Limitations\n\nThis implementation of nested transactions has the following transactions\n- The `txMode` property of sub-transactions is ignored. The transaction mode is only applied for\n  `BEGIN` statements, so only for top-level transactions.\n- `SET TRANSACTION` statements are only effective if they are called before any query of the\n  real Postgres transaction. This means that once any nested transaction does a query, the\n  transaction mode is locked for the whole transaction tree.\n\nSee the implementation details above for more information.\n\n### Configurable Transactions\n\nIn order to be able to fine-tune database requests in a highly asynchronous environment,\nPostgreSQL supports *Transaction Snapshots*, plus 3 ways of configuring a transaction:\n\n* [SET TRANSACTION](http://www.postgresql.org/docs/9.4/static/sql-set-transaction.html), to configure the current transaction,\nwhich your can execute as the very first query in your transaction function;\n* `SET SESSION CHARACTERISTICS AS TRANSACTION` - setting default transaction properties for the entire session; \n* [BEGIN](http://www.postgresql.org/docs/9.4/static/sql-begin.html) + `Transaction Mode` - initiates a pre-configured transaction.\n\nThe first method is quite usable, but that means you have to start every transaction with\nan initial query to configure the transaction, which can be a bit awkward.\n\nThe second approach isn't very usable within a database framework as this one, which relies\non a connection pool, so you don't really know when a new connection is created.\n\nThe last method is not usable, because transactions in this library are automatic, executing `BEGIN`\nwithout your control, or so it was until [Transaction Mode] type was added (read further).\n\n---  \n\n[Transaction Mode] extends the `BEGIN` command in your transaction with a complete set of configuration parameters.\n\n```js\nconst TransactionMode = pgp.txMode.TransactionMode;\nconst isolationLevel = pgp.txMode.isolationLevel;\n \n// Create a reusable transaction mode (serializable + read-only + deferrable):\nconst tmSRD = new TransactionMode({\n    tiLevel: isolationLevel.serializable,\n    readOnly: true,\n    deferrable: true\n});\n\nfunction myTransaction() {\n    return this.query('SELECT * FROM table');\n}\n\nmyTransaction.txMode = tmSRD; // assign transaction mode;\n\ndb.tx(myTransaction)\n    .then(() => {\n        // success;\n    });\n```\n\nInstead of the default `BEGIN`, such transaction will initiate with the following command:\n```\nBEGIN ISOLATION LEVEL SERIALIZABLE READ ONLY DEFERRABLE\n```\n\nTransaction Mode is set via property `txMode` on the transaction function.\n\nThis is the most efficient and best-performing way of configuring transactions. In combination with\n*Transaction Snapshots* you can make the most out of transactions in terms of performance and concurrency.\n\n## ES6 Generators\n\nIf you prefer writing asynchronous code in a synchronous manner, you can implement your tasks and transactions as generators. \n\n```js\nfunction * getUser(t) {\n    const user = yield t.oneOrNone('SELECT * FROM users WHERE id = $1', 123);\n    return yield user || t.one('INSERT INTO users(name) VALUES($1) RETURNING *', 'John');\n}\n\ndb.task(getUser)\n    .then(user => {\n        // success;\n    })\n    .catch(error => {\n        // error;\n    });\n```\n\nThe library verifies whether the callback function is a generator, and executes it accordingly.\n\n## Library de-initialization\n\nThis library manages all database connections via the [connection pool], which internally caches them.\n\nConnections in the cache expire due to inactivity after [idleTimeoutMillis] number of milliseconds, which you\ncan adjust when creating the [Database] object, or override the default via `pgp.pg.defaults.idleTimeoutMillis`\nbefore creating the [Database] object. \n\nWhile there is a single open connection in the pool, the process cannot terminate by itself, only via `process.exit()`. \nIf you want the process to finish by itself, without waiting for all connections in the pool to expire, you need\nto force the pool to shut down all the connections it holds:\n\n```js\ndb.$pool.end(); // shuts down the connection pool associated with the Database object\n``` \n\nFor example, if you are using the [Bluebird] library, you can chain the last promise in the process like this:\n\n```js\n.finally(db.$pool.end);\n``` \n\n**IMPORTANT:** Note that if your app is an HTTP service, or generally an application that does not feature any exit point,\nthen you should not do any de-initialization at all. It is only if your app is a run-through process/utility, then you\nmight want to use it, so the process ends without delays.  \n\nIn applications that either use multiple databases or execute a multi-pool strategy for balanced query loads, you would end up\nwith multiple [Database] objects, each with its own connection pool. In this scenario, in order to exit the process normally,\nat a particular point, you can call [pgp.end] to shut down all connection pools at once:\n\n```js\npgp.end(); // shuts down all connection pools created in the process\n```\n\nor promise-chained to the last query block in the process:\n\n```js\n.finally(pgp.end);\n``` \n\nOnce you have shut down the pool associated with your [Database] object, you can longer use the object, and any of its query methods\nwill be rejecting with [Error] = `Connection pool of the database object has been destroyed`.\n\nSee the relevant API: [pgp.end], [Database.$pool]\n \n# History\n\nFor the list of all changes see the [CHANGELOG](CHANGELOG.md).\n\n# License\n\nCopyright (c) 2017 Vitaly Tomilov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\n<!-- Internal Menu Links -->\n\n[Usage]:#usage\n[Index Variables]:#index-variables  \n[Named Parameters]:#named-parameters\n[Nested Named Parameters]:#nested-named-parameters\n[SQL Names]:#sql-names\n[Raw Text]:#raw-text\n[Open Values]:#open-values\n[Alias Filter]:#alias-filter\n[JSON Filter]:#json-filter\n[CSV Filter]:#csv-filter\n[Custom Type Formatting]:#custom-type-formatting\n[Explicit CTF]:#explicit-ctf\n[Symbolic CTF]:#symbolic-ctf\n\n<!-- Method Links -->\n\n[query]:http://vitaly-t.github.io/pg-promise/Database.html#query\n[none]:http://vitaly-t.github.io/pg-promise/Database.html#none\n[one]:http://vitaly-t.github.io/pg-promise/Database.html#one\n[oneOrNone]:http://vitaly-t.github.io/pg-promise/Database.html#oneOrNone\n[many]:http://vitaly-t.github.io/pg-promise/Database.html#many\n[manyOrNone]:http://vitaly-t.github.io/pg-promise/Database.html#manyOrNone\n[any]:http://vitaly-t.github.io/pg-promise/Database.html#any\n[result]:http://vitaly-t.github.io/pg-promise/Database.html#result\n[multi]:http://vitaly-t.github.io/pg-promise/Database.html#multi\n[multiResult]:http://vitaly-t.github.io/pg-promise/Database.html#multiResult\n[map]:http://vitaly-t.github.io/pg-promise/Database.html#map\n[each]:http://vitaly-t.github.io/pg-promise/Database.html#each\n[func]:http://vitaly-t.github.io/pg-promise/Database.html#func\n[proc]:http://vitaly-t.github.io/pg-promise/Database.html#proc\n[stream]:http://vitaly-t.github.io/pg-promise/Database.html#stream\n[connect]:http://vitaly-t.github.io/pg-promise/Database.html#connect\n[task]:http://vitaly-t.github.io/pg-promise/Database.html#task\n[tx]:http://vitaly-t.github.io/pg-promise/Database.html#tx\n[batch]:http://vitaly-t.github.io/pg-promise/Task.html#batch\n[sequence]:http://vitaly-t.github.io/pg-promise/Task.html#sequence\n[page]:http://vitaly-t.github.io/pg-promise/Task.html#page\n[extend]:http://vitaly-t.github.io/pg-promise/global.html#event:extend\n\n<!-- API Links -->\n\n[Official Documentation]:http://vitaly-t.github.io/pg-promise/index.html\n[Initialization Options]:http://vitaly-t.github.io/pg-promise/module-pg-promise.html\n[helpers]:http://vitaly-t.github.io/pg-promise/helpers.html\n[QueryFile]:http://vitaly-t.github.io/pg-promise/QueryFile.html\n[QueryFileError]:http://vitaly-t.github.io/pg-promise/QueryFileError.html\n[Database]:http://vitaly-t.github.io/pg-promise/Database.html\n[Database.$pool]:http://vitaly-t.github.io/pg-promise/Database.html#$pool\n[pgp.end]:http://vitaly-t.github.io/pg-promise/module-pg-promise.html#~end\n[formatting]:http://vitaly-t.github.io/pg-promise/formatting.html\n[ctf]:http://vitaly-t.github.io/pg-promise/formatting.ctf.html\n[as.format]:http://vitaly-t.github.io/pg-promise/formatting.html#.format\n[format]:http://vitaly-t.github.io/pg-promise/formatting.html#.format\n[as.value]:http://vitaly-t.github.io/pg-promise/formatting.html#.value\n[as.csv]:http://vitaly-t.github.io/pg-promise/formatting.html#.csv\n[as.json]:http://vitaly-t.github.io/pg-promise/formatting.html#.json\n[as.name]:http://vitaly-t.github.io/pg-promise/formatting.html#.name\n[as.alias]:http://vitaly-t.github.io/pg-promise/formatting.html#.alias\n[Transaction Mode]:http://vitaly-t.github.io/pg-promise/txMode.TransactionMode.html\n\n<!-- WiKi Links -->\n\n[Learn by Example]:https://github.com/vitaly-t/pg-promise/wiki/Learn-by-Example\n[Chaining Queries]:https://github.com/vitaly-t/pg-promise/wiki/Chaining-Queries\n\n<!-- External Links -->\n\n[node-postgres]:https://github.com/brianc/node-postgres\n[Promises/A+]:https://promisesaplus.com/\n[Bluebird]:https://github.com/petkaantonov/bluebird\n[SQL injection]:https://en.wikipedia.org/wiki/SQL_injection\n[Symbol]:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\n[idleTimeoutMillis]:https://github.com/brianc/node-postgres/blob/master/lib/defaults.js#L46\n[connection pool]:https://github.com/brianc/node-pg-pool\n[Error]:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vitaly-t/pg-promise.git"
  },
  "scripts": {
    "coverage": "istanbul cover ./node_modules/jasmine-node/bin/jasmine-node test",
    "doc": "jsdoc -c ./jsdoc/jsdoc.js ./jsdoc/README.md -t ./jsdoc/templates/custom",
    "lint": "eslint ./lib ./test/*.js ./test/db",
    "test": "jasmine-node test",
    "test-native": "jasmine-node test --config PG_NATIVE true",
    "travis": "npm run lint && istanbul cover ./node_modules/jasmine-node/bin/jasmine-node test --captureExceptions && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage"
  },
  "typings": "typescript/pg-promise.d.ts",
  "version": "7.3.2"
}

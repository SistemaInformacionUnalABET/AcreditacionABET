{
  "_from": "csvjson",
  "_id": "csvjson@5.0.0",
  "_inBundle": false,
  "_integrity": "sha1-RW3zzrqYnR+qEhG/KttKk8kel9Q=",
  "_location": "/csvjson",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "csvjson",
    "fetchSpec": "latest",
    "name": "csvjson",
    "raw": "csvjson",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/csvjson/-/csvjson-5.0.0.tgz",
  "_shasum": "456df3ceba989d1faa1211bf2adb4a93c91e97d4",
  "_shrinkwrap": null,
  "_spec": "csvjson",
  "_where": "C:\\Users\\Daniel\\Documents\\Unal\\Trabajo_BD_Ing_EyE\\RepositorioGitHub\\AcreditacionABET\\backend",
  "author": {
    "name": "Pradeep Mishra"
  },
  "bugs": {
    "url": "https://github.com/pradeep-mishra/csvjson/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "convert csv to json and json to csv",
  "devDependencies": {
    "chai": "^1.10.0",
    "mocha": "^2.1.0"
  },
  "homepage": "https://github.com/pradeep-mishra/csvjson#readme",
  "keywords": [
    "coloum-array",
    "csv",
    "csv stream",
    "csv to json",
    "csv2json",
    "csvtojson",
    "json stream",
    "json to csv",
    "json2csv",
    "jsoncsv",
    "jsontocsv",
    "schema json",
    "schema-csv",
    "schema-json",
    "stream csv",
    "stream json"
  ],
  "license": "MIT",
  "main": "./index.js",
  "name": "csvjson",
  "optionalDependencies": {},
  "readme": "\ncsvjson\n=================\n\nSimple CSV to JSON and JSON to CSV converter with stream support\n-----------------------------------------\nfor Node.js and Browser.\n-------------------------------------\n\n&copy; Pradeep Mishra, Licensed under the MIT-LICENSE\n\n\n\nFeatures\n--------\n\n* CSV to JSON object\n* CSV to schema JSON object\n* CSV to array object\n* CSV to column array object\n* JSON object to CSV\n* JSON array to CSV\n* Stream support\n\n\n\nExample usage\n-------------\n\n```javascript\nvar csvjson = require('csvjson');\n\n/*\n    sample.csv\n\n    sr,name,age,gender\n    1,rocky,33,male\n    2,jacky,22,male\n    3,suzy,21,female\n\n*/\n\n\n/*\n    schema_sample.csv\n\n    created,contact.name,contact.age+,contact.number+,address[],address[],contact.hobbies[],contact.hobbies[],-id\n    2014-11-12,Pradeep,25,4352436,MG Road,Mumbai,pc games,guitar,5\n    2014-10-06,Arnav,16,7364537,KB Road,Mumbai,pc games,traveling,7\n\n\n*/\n\n\n/*\nschema_sample2.csv\n\nname,age,contacts[0].name,contacts[0].phone,contacts[1].name,contacts[1].phone,musician,instruments.past,instruments.current[],instruments.current[]\nMark,33,Jim Palmer,8888888888,Marcus Aurelius,7309899877,Yes,Guitar,Drums,Bass Guitar\nJeff,27,John Doe,8009008000,Michael Corleone,2121001000,Yes,Drums,Flute,Trumpet\n\n*/\n\n/*\njsoncsv.json\n\n\n{\n \"book\": {\n   \"person\": [\n     {\n       \"firstName\": \"Jane\",\n       \"lastName\": \"Doe\",\n       \"age\": \"25\",\n       \"address\": {\n         \"streetAddress\": \"21 2nd Street\",\n         \"city\": \"Las Vegas\",\n         \"state\": \"NV\",\n         \"postalCode\": \"10021-3100\"\n       },\n       \"hobbies\" : [\"gaming\", \"volleyball\"]\n     },\n     {\n       \"firstName\": \"Agatha\",\n       \"lastName\": \"Doe\",\n       \"age\": \"25\",\n       \"address\": {\n         \"streetAddress\": \"21 2nd Street\",\n         \"city\": \"Las Vegas\",\n         \"state\": \"NV\",\n         \"postalCode\": \"10021-3100\"\n       },\n       \"hobbies\" : [\"dancing\", \"politics\"]\n     }\n   ]\n }\n}\n\n\n*/\n\n\n```\n\nconvert csv data to json object\n----------------------------------------\n```javascript\nvar data = fs.readFileSync(path.join(__dirname, 'schema_sample2.csv'), { encoding : 'utf8'});\n/*\n{\n    delimiter : <String> optional default is \",\"\n    quote     : <String|Boolean> default is null\n}\n*/\nvar options = {\n  delimiter : ',', // optional\n  quote     : '\"' // optional\n};\n// for multiple delimiter you can use regex pattern like this /[,|;]+/\n\n/* \n  for importing headers from different source you can use headers property in options \n  var options = {\n    headers : \"sr,name,age,gender\"\n  };\n*/\n\ncsvjson.toObject(data, options);\n\n/*\n    returns\n\n    [\n        {\n            sr : 1,\n            name : \"rocky\",\n            age : 33,\n            gender : \"male\"\n        },\n        {\n            sr : 2,\n            name : \"jacky\",\n            age : 22,\n            gender : \"male\"\n        },\n        {\n            sr : 3,\n            name : \"suzy\",\n            age : 21,\n            gender : \"female\"\n        }\n\n    ]\n\n*/\n\n\n```\nconvert csv data to schema json object\n-----------------------------------------------\n```javascript\n\n/*\n    for creating schema of json object following key can be used in header of csv file:\n\n    .   for defining nested json object\n    []  for defining data as array (suffix)\n        -- can add delimiter in the array (i.e. [;] for delimiter of ;)\n        -- can nest objects in the array, index must be listed (i.e. [1] for index 1)\n    +   for defining data as integer (suffix)\n    -   for omitting data from result output (prefix)\n\n*/\n\n\n/*\n    schema_sample.csv\n\n    created,contact.name,contact.age+,contact.number+,address[],address[],contact.hobbies[;],-id,friends[0].name,friends[0].phone,friends[1].name,friends[1].phone\n    2014-11-12,Pradeep,25,4352436,MG Road,Mumbai,pc games; guitar,5,Jeff,8761234567,Mike,1234567890\n    2014-10-06,Arnav,16,7364537,KB Road,Mumbai,pc games; traveling,7,Steve,555555555,Pradeep,4352436\n\n*/\n\nvar data = fs.readFileSync(path.join(__dirname, 'schema_sample.csv'), { encoding : 'utf8'});\n/*\n{\n    delimiter : <String> optional default is \",\"\n    quote     : <String|Boolean> default is null\n}\n*/\nvar options = {\n  delimiter : ',', // optional\n  quote     : '\"' // optional\n};\n\n// for multiple delimiter you can use regex pattern like this /[,|;]+/\n\n/* \n  for importing headers from different source you can use headers property in options \n  var options = {\n    headers : \"created,contact.name,contact.age+,contact.number+,address[],address[],contact.hobbies[;],-id,friends[0].name,friends[0].phone,friends[1].name,friends[1].phone\"\n  };\n*/\n\ncsvjson.toSchemaObject(data, options)\n\n/*\n    returns\n\n    [\n        {\n            \"created\":\"2014-11-12\",\n            \"contact\":{\n                \"name\":\"Pradeep\",\"\n                age\":25,\n                \"number\":4352436,\n                \"hobbies\":[\"pc games\",\"guitar\"]\n\n            },\n            \"address\":[\"MG Road\",\"Mumbai\"],\n            \"friends\":[\n                {\n                    \"name\": \"Jeff\",\n                    \"phone\": \"8761234567\"\n                },\n                {\n                    \"name\": \"Mike\",\n                    \"phone\": \"1234567890\"\n                }\n            ]\n        },\n        {\n            \"created\":\"2014-10-06\",\n            \"contact\":{\"\n                name\":\"Arnav\",\n                \"age\":16,\n                \"number\":7364537,\n                \"hobbies\":[\"pc games\",\"traveling\"]\n\n            },\n            \"address\":[\"KB Road\",\"Mumbai\"],\n            \"friends\":[\n                {\n                    \"name\": \"Steve\",\n                    \"phone\": \"5555555555\"\n                },\n                {\n                    \"name\": \"Pradeep\",\n                    \"phone\": \"4352436\"\n                }\n            ]\n        }\n\n    ]\n\n\n*/\n\n```\nconvert csv data to array object\n-----------------------------------------\n```javascript\n\nvar data = fs.readFileSync(path.join(__dirname, 'sample.csv'), { encoding : 'utf8'});\n\n/*\n{\n    delimiter : <String> optional default is \",\"\n    quote     : <String|Boolean> default is null\n}\n*/\nvar options = {\n  delimiter : ',', // optional\n  quote     : '\"' // optional\n};\n\n// for multiple delimiter you can use regex pattern like this /[,|;]+/\n\ncsvjson.toArray(data, options);\n\n/*\n    returns\n    [\n        [\"sr\",\"name\",\"age\",\"gender\"],\n        [\"1\",\"rocky\",\"33\",\"male\"],\n        [\"2\",\"jacky\",\"22\",\"male\"],\n        [\"3\",\"suzy\",\"21\",\"female\"]\n    ]\n\n*/\n\n```\nconvert csv data to column array object\n---------------------------------------\n```javascript\n\nvar data = fs.readFileSync(path.join(__dirname, 'sample.csv'), { encoding : 'utf8'});\n\n/*\n{\n    delimiter : <String> optional default is \",\"\n    quote     : <String|Boolean> default is null\n}\n*/\nvar options = {\n  delimiter : ',', // optional\n  quote     : '\"' // optional\n};\n\n// for multiple delimiter you can use regex pattern like this /[,|;]+/\n\n/* \n  for importing headers from different source you can use headers property in options \n  var options = {\n    headers : \"sr,name,age,gender\"\n  };\n*/\n\ncsvjson.toColumnArray(data, options);\n\n/*\n    returns\n\n    {\n        sr: [ '1', '2', '3' ],\n        name: [ 'rocky', 'jacky', 'suzy' ],\n        age: [ '33', '22', '21' ],\n        gender: [ 'male', 'male', 'female' ]\n    }\n\n*/\n\n\n```\nconvert json object to csv data\n-------------------------------\n```javascript\n\nvar data = fs.readFileSync(path.join(__dirname, 'jsoncsv.json'), { encoding : 'utf8'});\nvar options = {\n    delimiter   : \",\",\n    wrap        : false\n}\n\n/* supported options\n\n    delimiter = <String> optional default value is \",\"\n    wrap  = <String|Boolean> optional default value is false\n    headers = <String> optional supported values are \"full\", \"none\", \"relative\", \"key\"\n    objectDenote = <String> optional default value is \".\"\n    arrayDenote = <String> optional default value is \"[]\"\n*/\n\n\ncsvjson.toCSV(data, options);\n\n/*\nreturns\n\nbook.person[].firstName,book.person[].lastName,book.person[].age,book.person[].address.streetAddress,book.person[].address.city,book.person[].address.state,book.person[].address.postalCode,book.person[].hobbies[]\nJane,Doe,25,21 2nd Street,Las Vegas,NV,10021-3100,gaming;volleyball\nAgatha,Doe,25,21 2nd Street,Las Vegas,NV,10021-3100,dancing;politics\n\n*/\n```\nconvert csv to json using stream\n-----------------------------------------\n```javascript\n\nvar read = fs.createReadStream(path.join(__dirname, 'sample.csv'));\nvar write = fs.createWriteStream(path.join(__dirname, 'sample.json'));\nvar toObject = csvjson.stream.toObject();\nvar stringify = csvjson.stream.stringify();\nread.pipe(toObject)pipe(stringify).pipe(write);\n\n/*\nfollowing functions available for stream transformation\ncsvjson.stream.toObject()\ncsvjson.stream.toArray()\ncsvjson.stream.toColumnArray()\ncsvjson.stream.toSchemaObject()\n*/\n\n/*\ncsvjson.stream.stringify(<space>)\nstringify function accepts optional space param to format output\n*/\n\n```\n```bash\nnpm install csvjson --save\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/pradeep-mishra/csvjson.git"
  },
  "scripts": {
    "test": "mocha -R spec tests/main.test.js"
  },
  "version": "5.0.0"
}
